/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-10-06 15:13:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class orderform_005ffirst_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("		 <form id=\"orderform_first\" method=\"post\"> \n");
      out.write("			<input type=\"hidden\" name=\"orderform_type\" value=\"1\">\n");
      out.write("				<div class=\"order_main_input_wrapper order_main_content\">\n");
      out.write("					<div class=\"order_main_input\">\n");
      out.write("						<label for=\"order_email\">이메일</label><br>\n");
      out.write("						<input class=\"order_email\" id=\"order_eamil\" type=\"email\" name=\"email\" placeholder=\"이메일\">\n");
      out.write("						<span class=\"order_inform_text order_email_inform_text\"></span>	\n");
      out.write("					</div>\n");
      out.write("					<div class=\"order_main_input\">\n");
      out.write("						<label for=\"order_phone\">전화번호</label><br>\n");
      out.write("						<input class=\"order_phone\" id=\"order_phone\" type=\"tel\" name=\"phone\" placeholder=\"전화번호\">\n");
      out.write("						<span class=\"order_inform_text order_phone_inform_text\"></span>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("		</form>		\n");
      out.write("				<div class=\"order_main_provision order_main_content\">\n");
      out.write("					<div class=\"order_main_provision_title\">\n");
      out.write("						<span>이용약관</span>\n");
      out.write("						<span>전문보기</span>\n");
      out.write("					</div>\n");
      out.write("					<div>\n");
      out.write("								<p>\n");
      out.write("									나이키 이용약관\n");
      out.write("		\n");
      out.write("				제1조 (목적)\n");
      out.write("				\n");
      out.write("				본 '나이키닷컴 서비스 이용 약관' (이하 \"본 약관\"이라 합니다)은 이용자가 (유)나이키코리아에서 제공하는 나이키닷컴 사이트 및 사이트 관련 각종 서비스 (이하 \"서비스\"라 합니다)를 이용함에 있어 \"나이키닷컴\"과 “이용자”의 권리 의무 및 책임 사항을 규정함을 목적으로 합니다.\n");
      out.write("				\n");
      out.write("				제2조 (정의)\n");
      out.write("				\n");
      out.write("				본 약관의 주요 용어는 아래와 같이 정의합니다.\n");
      out.write("				\n");
      out.write("				① \"NIKE\"는 (유)나이키코리아를 말하며 나이키닷컴은 NIKE가 운영하는 공식 온라인 쇼핑몰을 말합니다.\n");
      out.write("				\n");
      out.write("				② \"서비스\"란 나이키닷컴 사이트 및 사이트 관련 각종 서비스를 말합니다.\n");
      out.write("				\n");
      out.write("				③ “이용자”란 \"사이트\"에 접속하여 이 약관에 따라 \"나이키닷컴\"이 제공하는 “서비스”를 받는 “회원”과 비회원을 말합니다.\n");
      out.write("				\n");
      out.write("				④ \"회원\"은 \"나이키닷컴\"에 개인 정보를 제공하여 회원 등록을 한 자로서, 회원 전용 \"서비스\"를 이용할 수 있는 자를 말합니다.\n");
      out.write("				\n");
      out.write("				⑤ \"비회원\"이라 함은 회원에 가입하지 않고 \"서비스\"를 이용하는 자를 말합니다.\n");
      out.write("				\n");
      out.write("				2. 이 약관에서 정하지 아니한 내용과 이 약관의 해석에 관하여는 전자상거래 등에서의 소비자보호에 관한 법률, 약관의 규제 등에 관한 법률, 공정거래위원 회가 정하는 전자상거래 등에서의 소비자보호지침 및 관계법령 또는 상관례에 따릅니다\n");
      out.write("				\n");
      out.write("		\n");
      out.write("		\n");
      out.write("								</p>\n");
      out.write("							</div>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"order_main_provision order_main_content\">\n");
      out.write("						<div class=\"order_main_provision_title\">\n");
      out.write("							<span>이용약관</span>\n");
      out.write("							<span>약관보기</span>\n");
      out.write("						</div>\n");
      out.write("							<div>\n");
      out.write("								<p>\n");
      out.write("												제 3조 (약관의 게시와 변경)\n");
      out.write("								1. \"나이키닷컴\"은 이 약관의 내용과 상호, 영업소 소재지 주소(소비자의 불만을 처리할 수 있는 곳의 주소를 포함)전화번호, 모사전송번호, 이메일 주소, 사업자등록번호, 통신판매업신고번호, 개인정보보호책임자 등을 이용자가 쉽게 알 수 있도록 “나이키닷컴”의 초기 서비스화면(전면)에 게시합니다. 다만, 약관의 내용은 이용자가 연결화 면을 통하여 볼 수 있도록 할 수 있습니다.\n");
      out.write("								\n");
      out.write("								2. \"나이키닷컴\"은 이용자가 약관에 동의하기에 앞서 약관에 정하여져 있는 내용 중 청약철회, 배송책임, 환불조건 등과 같은 중요한 내용을 이용 자가 이해할 수 있도록 별도의 연결화면 또는 팝업화면 등을 제공하여 이용자의 확인을 구하여야 합니다.\n");
      out.write("								\n");
      out.write("								3. \"나이키닷컴\"은 「전자상거래 등에서의 소비자보호에 관한 법률」, 「약관의 규제에 관한 법률」, 「전자문서 및 전자거래기본법」, 「전자금융거래법」, 「전자서명법」, 「정보통신망 이용촉진 및 정보보호 등에 관한 법률」, 「방문판매 등에 관한 법률」, 「소비자기본법」 등 관련 법을 위배하지 않는 범위에서 이 약관을 개정할 수 있습니다.\n");
      out.write("								\n");
      out.write("								4. \"나이키닷컴\"은 약관을 개정할 경우에는 적용일자 및 개정사유를 명시하여 현행약관과 함께 홈페이지의 초기화면에 그 적용일 7일 이전부터 적용일자 전일까지 공지합니다. 다만, 이용자에게 불리하게 약관내용을 변경하는 경우에는 최소한 30일 이상의 사전 유예기간을 두고 공지합니다. 이 경우 \"나이키닷컴\"은 개정 전 내용과 개정 후 내용을 명확하게 비교하여 이용자가 알기 쉽도록 표시합니다.\n");
      out.write("								\n");
      out.write("								5. 변경된 약관 조항 중 상품의 구매계약에 관한 조항은 그 적용일자 이후에 체결되는 계약에만 적용되고 그 이전에 이미 체결된 계약에 대해서는 변경전의 조항이 그대로 적용됩니다. 다만, 이미 매매계약을 체결한 이용자가 변경된 조항의 적용을 받기를 원하는 뜻을 상기 제4항에 의한 변경약관의 공지기간 내에 \"나이키닷컴\"에 송신하여 \"나이키닷컴\"의 동의를 받은 경우에는 변경된 조항이 적용됩니다.\n");
      out.write("								\n");
      out.write("								6. \"나이키닷컴\"이 개정약관을 공지 또는 통지하면서 회원에게 30일 기간 내에 의사표시를 하지 않으면 의사표시가 표명된 것으로 본다는 뜻을 명확하게 따로 공지 또는 고지하였음에도 회원이 명시적으로 거부의사를 표시하지 아니한 경우 회원이 개정약관에 동의한 것으로 봅니다. 또한, 회원이 개정약관의 적용에 동의하지 않는 경우 \"나이키닷컴\"은 개정약관의 내용을 적용할 수 없으며, 이 경우, 회원은 이용계약을 해지할 수 있습니다. 다만, 기존약관을 적용할 수 없는 특별한 사정이 있는 경우에는 \"나이키닷컴\"은 이용계약을 해지할 수 있습니다.\n");
      out.write("								\n");
      out.write("								7. 이 약관에서 정하지 아니한 내용과 이 약관의 해석에 관하여 전자상거래 등에서의 소비자보호에 관한 법률, 약관의 규제 등에 관한 법률, 공정거래위원회가 정하 는 전자상거래 등에서의 소비자보호지침 및 관계법령 또는 상관례에 따릅니다.\n");
      out.write("								\n");
      out.write("								제 4조 (서비스의 제공 및 변경)\n");
      out.write("							</p>\n");
      out.write("						</div>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"order_checkbox order_main_content\">\n");
      out.write("						<input id=\"order_checkbox\" type=\"checkbox\" value=\"#\" onchange=\"agree_button_check()\">\n");
      out.write("						<label for=\"order_checkbox\">비회원 개인정보 수집 정보동의</label>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"order_submit_wrapper order_main_content\">\n");
      out.write("						<button form=\"orderform_first\"formaction=\"#\" id =\"button_event\" class=\"order_submit_button\" onclick=\"return check_email();\">다음단계 진행</button>\n");
      out.write("					</div>\n");
      out.write("			<script>\n");
      out.write("				const first_button  = document.querySelector('.order_submit_button');\n");
      out.write("				const agree_box = document.getElementById('order_checkbox');\n");
      out.write("				\n");
      out.write("				function agree_button_check(){\n");
      out.write("					console.log('click');\n");
      out.write("					if(agree_box.checked){\n");
      out.write("						first_button.classList.remove(\"order_submit_button\")\n");
      out.write("						first_button.classList.add(\"order_submit_button_checked\");\n");
      out.write("					}\n");
      out.write("					else{\n");
      out.write("						first_button.classList.remove(\"order_submit_button_checked\");\n");
      out.write("						first_button.classList.add(\"order_submit_button\");\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				first_button.addEventListener('click',(event)=> {\n");
      out.write("					console.log(\"check_pnum 실행\");\n");
      out.write("					const input = document.getElementById('order_phone');\n");
      out.write("					const text = document.querySelector('.order_phone_inform_text');\n");
      out.write("					\n");
      out.write("					if(input.value == ''){\n");
      out.write("						text.innerHTML = '필수입력 항목입니다';\n");
      out.write("						\n");
      out.write("						event.preventDefault();\n");
      out.write("					}\n");
      out.write("					else{\n");
      out.write("						text.innerHTML ='';\n");
      out.write("						\n");
      out.write("					}\n");
      out.write("				});\n");
      out.write("			\n");
      out.write("				first_button.addEventListener('click',(event) => {\n");
      out.write("					\n");
      out.write("					const input = document.querySelector('.order_email');\n");
      out.write("					const text = document.querySelector('.order_email_inform_text');\n");
      out.write("				    let regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n");
      out.write("					\n");
      out.write("				     if (regExp.test(input.value)){\n");
      out.write("				    	 text.innerHTML='';\n");
      out.write("						\n");
      out.write("					}\n");
      out.write("				     else if(input.value == ''){ \n");
      out.write("				    	 text.innerHTML = '필수입력 항목입니다';\n");
      out.write("						event.preventDefault();\n");
      out.write("				     } \n");
      out.write("				     \n");
      out.write("					 else{\n");
      out.write("						 text.innerHTML='이메일 형식이 아닙니다.';\n");
      out.write("							event.preventDefault();\n");
      out.write("\n");
      out.write("					 }\n");
      out.write("				});\n");
      out.write("			</script>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
